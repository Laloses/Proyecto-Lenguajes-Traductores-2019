package slag;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JTextPane;
import java.awt.Graphics2D;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author STEWART
 */
public class SLAG_VISTA extends javax.swing.JFrame{

    /**
     * Creates new form SLAG_VISTA
     */
    AnalizadorSintactico analizadorSin;
    AnalizadorLexico analizador;
     String nombrearchivo="sin_titulo";
     String patharchivo=null;
     String nombrearchivoES="Especificacion_lexico.txt";
     String patharchivoES="Especificacion_lexico.txt";
    public SLAG_VISTA() {
        initComponents();
        this.setTitle(nombrearchivo);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH); 
        
        analizador=new AnalizadorLexico();
        analizadorSin=new AnalizadorSintactico(analizador,this);
        try
        {
            analizador.SetArchivoEspecificacion(patharchivoES);
            analizador.LeerArchivoEspecificacion();

            jTextPane2.setText( "SLAG:");
            //JOptionPane.showMessageDialog(null,"ESPECIFICACION CARGADA");
        }catch( Exception exp){
            JOptionPane.showMessageDialog(null,"ERROR AL ABRIR EL ARCHIVO DE ESPECIFICACION");
            nombrearchivoES=null;
            patharchivo=null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextPane1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(jTextPane2);

        jLabel1.setText("jLabel1");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 684, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Guardar como...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ejecutar");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem5.setText("Ejecutar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ActualizarTerminal(String aux){
        this.jTextPane2.setText(aux);
    }
    
    public String ObtenerTerminal(){
        return this.jTextPane2.getText();
    }
    
    public void PintarLinea(int linea) throws BadLocationException{
        int i,inicio=0,fin=0, tamTotal;
        Highlighter h = this.jTextPane1.getHighlighter();
        //Quitar hightlight anterior
        tamTotal=this.jTextPane1.getText().length();
        //h.addHighlight(0, tamTotal, new DefaultHighlighter.DefaultHighlightPainter(Color.white));
        
        //para quitar las lineas puestas anteriormente
        h.removeAllHighlights();    
        
        //Ciclo para pintar
        String[] lineas;
        lineas = this.jTextPane1.getText().split("\n");
        for(i=0; i<linea; i++){
            inicio=lineas[i].length();
        }
        fin=inicio+lineas[linea].length();
        //Obtener el estilo actual
        System.out.println("Inicio: "+inicio+"; Fin: "+fin);
        h.addHighlight(inicio, fin, new DefaultHighlighter.DefaultHighlightPainter(Color.red));
    }
    
    public void PintarTabladatos(TablaVariablesConstantes tab, int linea) throws BadLocationException{
        Graphics g=this.jPanel1.getGraphics();
        //Graphics g2= this.jPanel2.getGraphics();
        Graphics2D drawImage = (Graphics2D) g;
        g.setClip(0, 0, (int)this.jPanel1.getBounds().getWidth(), (int)this.jPanel1.getBounds().getHeight());
        
        this.jPanel1.setAutoscrolls(true);
        
        PintarLinea(linea);
                
        jPanel1.paint(g);
        int indicepintura=0;
        int tamCons=0;
        int tamVar=0;
        int tamArr=0;
        int titulo=20;
        
        g.setFont(new Font("Agency FB", Font.BOLD, 14));
        g.setColor(Color.BLUE);
        g.drawString(linea+"",300,10);
        
        this.jTextPane1.getText();
        g.setColor(Color.BLACK);
        g.drawString("Constantes:", 10, titulo);
        
        /*
        for(VariableConstanteArreglo elemento: tab.a){
            if(elemento.tipo==TablaVariablesConstantes.almacenaconst){
               tamCons++;
            }
            if(elemento.tipo==TablaVariablesConstantes.almacenavari){
                tamVar++;
            }
            if(elemento.tipo==TablaVariablesConstantes.almacenaarray){
                tamArr++;
            }
        }
        */
        indicepintura+=titulo+15;
        
        for(VariableConstanteArreglo elemento: tab.a){
            if(elemento.tipo==TablaVariablesConstantes.almacenaconst){
                if(elemento.tipovalor==TablaVariablesConstantes.tipoentero){
                    ConstanteEntera cons=(ConstanteEntera)elemento;
                    g.drawString(" "+cons.id+" : "+cons.get(), 10, indicepintura);
                    indicepintura+=20;
                }else{
                    ConstanteCaracter cons=(ConstanteCaracter)elemento;
                    g.drawString(" "+cons.id+" : "+cons.get(), 10, indicepintura);
                    indicepintura+=20;
                }
            }
        }
        
        g.drawString("Variables:", 10, titulo+indicepintura);
        indicepintura+=titulo+15;
        
        //variables para los contadores de los arreglos
        String valArray="";
        boolean mostrarVA=false;
        int _nvar=0,_nItems=0,_nArrays=0;
        for(VariableConstanteArreglo elemento: tab.a){
            if(elemento.tipo==TablaVariablesConstantes.almacenavari){
                _nvar++;
                if(elemento.cambio){
                    JFrame jf = new JFrame();
                    jf.setBackground(Color.red);
                    g.setColor(Color.red);
                }
                if(elemento.tipovalor==TablaVariablesConstantes.tipoentero){
                    VariableEntera cons=(VariableEntera)elemento;
                    g.drawString(" "+cons.id+" : "+cons.get(), 10, indicepintura);
                    indicepintura+=20;
                    if(elemento.cambio){
                        valArray=cons.id;
                    }
                }else{
                    VariableCaracter cons=(VariableCaracter)elemento;
                    g.drawString(" "+cons.id+" : "+cons.get(), 10, indicepintura);
                    indicepintura+=20;
                    if(elemento.cambio){
                        valArray=cons.id;
                    }
                }
                elemento.cambio=false;
                g.setColor(Color.BLACK);
            }
        }
        
        g.drawString("Arreglos:", 200, 20);
        //indicepintura+=titulo+15;
        indicepintura=30;
        String impresion2 ="prueba..."; ///nueva linea
        for(VariableConstanteArreglo elemento: tab.a){
            if(elemento.tipo==TablaVariablesConstantes.almacenavari){ ///nueva linea
                if(elemento.tipovalor==TablaVariablesConstantes.tipoentero){///nueva linea
                    VariableEntera cons2=(VariableEntera)elemento;///nueva linea
                    impresion2 = " "+cons2.id+" : "+cons2.get();///nueva linea
                }///nueva linea
            }///nueva linea
            if(elemento.tipo==TablaVariablesConstantes.almacenaarray){
                String _id="";
                int _size=0;
                String _elem[]; 
                if(elemento.tipovalor==TablaVariablesConstantes.tipoentero){
                     ArregloEntero conse=(ArregloEntero)elemento;
                    _id=conse.id;
                    _size=conse.size();
                    _elem = new String[_size];
                    for(int j=0;j<_size;j++){
                        _elem[j]=Integer.toString(conse.get(j));
                    }
                }else{
                    ArregloCaracter consc=(ArregloCaracter)elemento;
                    _id=consc.id;
                    _size=consc.size();
                    _elem = new String[_size];
                    for(int j=0;j<_size;j++){
                        _elem[j]=Character.toString(consc.get(j));
                    }
                }
                String impresion=" "+_id+" :  ";
//                for(int j=0;j<_size;j++){
//                    impresion=impresion+_elem[j]+" ";
//                }
//                impresion=impresion+"}";
                g.setColor(Color.black);
//                g.drawString(impresion, 10, indicepintura+10);
                g.drawString(impresion, 200, indicepintura+10);
                indicepintura+=15;
                //g.drawString(impresion2, 10, indicepintura +10 );///nueva linea
                //indicepintura+=15;///nueva linea
//                int desplazamiento=10;
                int desplazamiento=200;
                for(int j=0;j<_size;j++){
                    if(j == elemento.indiceCambio){
                        drawImage.setColor(Color.red);
                        drawImage.fillRect(desplazamiento, indicepintura, 50, 50);

                        drawImage.setColor(Color.black);
                        drawImage.drawRect(desplazamiento, indicepintura, 50, 50);

                        drawImage.setColor(Color.white);
                        drawImage.drawString(_elem[j], desplazamiento+20, indicepintura+30);
                        drawImage.setColor(Color.black);
                        if(!valArray.equals(""))
                            drawImage.drawString(valArray+"="+j, desplazamiento+10, indicepintura+65);
                    }else{
                        drawImage.setColor(Color.white);
                        drawImage.fillRect(desplazamiento, indicepintura, 50, 50);

                        drawImage.setColor(Color.black);
                        drawImage.drawRect(desplazamiento, indicepintura, 50, 50);
                        drawImage.drawString(_elem[j], desplazamiento+20, indicepintura+30);
                    }
                    desplazamiento+=50;
                }
                //String impresion=" "+cons.id+" : { ";
                // for(int j=0;j<cons.size();j++){
                  //  impresion+=" '"+cons.get(j)+"' ,";
                //}
                //impresion+=" }";
                //g.setColor(Color.red);
                //  g.drawString(impresion, 10, indicepintura+10);
                //}
                indicepintura+=70;
                elemento.cambio=false;
                g.setColor(Color.BLACK);
            }
        }
        
        try{
            //imeUnit.SECONDS.sleep(1);
        }catch(Exception e){}
    }
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        jTextPane1.setText("");
        nombrearchivo="sin_titulo";
        this.setTitle( nombrearchivo );
        patharchivo=null;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser abrirArchivo = new JFileChooser();
            //Con esto solamente podamos abrir archivos
            abrirArchivo.setFileSelectionMode( JFileChooser.FILES_ONLY );

            int seleccion = abrirArchivo.showOpenDialog( this );

            if( seleccion == JFileChooser.APPROVE_OPTION )
            {
                File f = abrirArchivo.getSelectedFile();
                try
                {
                    nombrearchivo = f.getName();
                    patharchivo = f.getAbsolutePath();
                    String contenido = getArchivo();
                    //Colocamos en el titulo de la aplicacion el
                    //nombre del archivo
                    this.setTitle( nombrearchivo );

                    //En el editor de texto colocamos su contenido
                    jTextPane1.setText( contenido );

                }catch( Exception exp){
                  JOptionPane.showMessageDialog(null,"ERROR AL ABRIR EL ARCHIVO");
                  nombrearchivo="sin_titulo";
                  this.setTitle( nombrearchivo );
                  patharchivo=null;
                }
            }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        jMenuItem3ActionPerformed(evt);
        if(patharchivo!=null){
          analizador.SetArchivoAnalizar(patharchivo);
          try{

            if(analizadorSin.ComprobarArchivo()){
              //jTextPane2.setText("SLAG: \n Tokens :\n"+analizador.ImprimirListaTokens()+"\n"+analizadorSin.getError());
              //jTextPane2.setText("SLAG:\n"+analizadorSin.getError());
              JOptionPane.showMessageDialog(null,"Analisis Exitoso");
            }else{
              JOptionPane.showMessageDialog(null,"ERROR");
              jTextPane2.setText("SLAG:\n"+analizadorSin.getError());
            }

          }catch(Exception e){
            JOptionPane.showMessageDialog(null,"ERROR: OCURRIO UN PROBLEMA AL ABRIR EL ARCHIVO");
          }
        }else{
          JOptionPane.showMessageDialog(null,"ERROR: FALTA SELECCIONAR ARCHIVO DE ANALISIS");
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try
        {
          File guarda;
          if(patharchivo==null)
          {
            JFileChooser file=new JFileChooser();
            file.showSaveDialog(this);
             guarda=file.getSelectedFile();
          }else{
            guarda= new File(patharchivo);
          }

          if(guarda !=null)
          {
            /*guardamos el archivo y le damos el formato directamente,
            * si queremos que se guarde en formato doc lo definimos como .doc*/
            nombrearchivo=guarda.getName();
            patharchivo = guarda.getAbsolutePath();
            this.setTitle( nombrearchivo );
            FileWriter  save=new FileWriter(guarda);
            save.write(jTextPane1.getText());
            save.close();
            JOptionPane.showMessageDialog(null,"El archivo se a guardado Exitosamente","Informacion",JOptionPane.INFORMATION_MESSAGE);
            }
          }
          catch(IOException ex)
          {
            JOptionPane.showMessageDialog(null,"Su archivo no se ha guardado","Advertencia",JOptionPane.WARNING_MESSAGE);
            nombrearchivo="sin_titulo";
            this.setTitle( nombrearchivo );
            patharchivo=null;
          }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        try
        {
          File guarda;
          JFileChooser file=new JFileChooser();
          file.showSaveDialog(this);
          guarda=file.getSelectedFile();

          nombrearchivo=guarda.getName();
          patharchivo = guarda.getAbsolutePath();
          this.setTitle( nombrearchivo );

          if(guarda !=null)
          {
            /*guardamos el archivo y le damos el formato directamente,
            * si queremos que se guarde en formato doc lo definimos como .doc*/
            FileWriter  save=new FileWriter(guarda);
            save.write(jTextPane1.getText());
            save.close();
            JOptionPane.showMessageDialog(null,"El archivo se a guardado Exitosamente","Información",JOptionPane.INFORMATION_MESSAGE);
            }
          }
          catch(IOException ex)
          {
            JOptionPane.showMessageDialog(null,"Su archivo no se ha guardado","Advertencia",JOptionPane.WARNING_MESSAGE);
            nombrearchivo="sin_titulo";
            this.setTitle( nombrearchivo );
            patharchivo=null;
          }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SLAG_VISTA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SLAG_VISTA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SLAG_VISTA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SLAG_VISTA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SLAG_VISTA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables

    private String getArchivo() {
        String ruta=patharchivo;
        FileReader fr = null;
        BufferedReader br = null;
        //Cadena de texto donde se guardara el contenido del archivo
        String contenido = "";
        try
        {
            //ruta puede ser de tipo String o tipo File
            fr = new FileReader( ruta );
            br = new BufferedReader( fr );

            String linea;
            //Obtenemos el contenido del archivo linea por linea
            while( ( linea = br.readLine() ) != null ){
                contenido += linea + "\n";
            }

        }catch( Exception e ){  }
        //finally se utiliza para que si todo ocurre correctamente o si ocurre
        //algun error se cierre el archivo que anteriormente abrimos
        finally
        {
            try{
                br.close();
            }catch( Exception ex ){}
        }
        return contenido;
    }
}